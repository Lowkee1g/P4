# 1 "lexer.mll"
 
open Lexing
open Ast
open Parser

exception Lexing_error of string

let string_buff = Buffer.create 256


let char_for_backslash = function
  | 'n' -> '\n'
  | 'r' -> '\r'
  | 'b' -> '\b'
  | 't' -> '\t'
  | c   -> c

let backslash_escapes = ['\\'; '\''; '"'; 'n'; 't'; 'b'; 'r'; ' ']

let kwd_tbl = [
  "for", FOR;
  "to", TO;
  "downto", DOWNTO;
  "swap", SWAP;
  "exchange", EXCHANGE;
  "length", LENGTH;
  "with", WITH;
  "if", IF;
  "else", ELSE;
  "elseif", ELSEIF;
  "print", PRINT;
  "while", WHILE;
  "let", LET;
  "cross", CROSS; (* Produktet af to matrixer *)
  "matrix", MATRIX;
  "columns", COLUMNS;
  "rows", ROWS;
  "return", RETURN;
  "Random", RANDOM;
]

let id_or_kwd = 
  let h = Hashtbl.create 17 in
  List.iter (fun (s, t) -> Hashtbl.add h s t) kwd_tbl;
  fun s ->
    (*let s = String.lowercase_ascii s in*)
    try Hashtbl.find h s with Not_found -> IDENT s


let stack = ref [0]  (* indentation stack *)

let rec unindent n = match !stack with
  | m :: _ when m = n -> []
  | m :: st when m > n -> stack := st; END :: unindent n
  | _ -> raise (Lexing_error "bad indentation")

let update_stack n =
  match !stack with
  | m :: _ when m < n ->
    stack := n :: !stack;
    [NEWLINE; BEGIN]
  | _ ->
    NEWLINE :: unindent n

# 67 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\237\255\238\255\075\000\239\255\240\255\241\255\242\255\
    \243\255\244\255\245\255\246\255\247\255\248\255\249\255\250\255\
    \251\255\252\255\085\000\003\000\255\255\004\000\255\255\004\000\
    \253\255\176\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\016\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\002\000\001\000\255\255\001\000\255\255\255\255\
    \255\255\002\000\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\000\000\024\000\
    \000\000\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\020\000\000\000\019\000\021\000\022\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\005\000\019\000\021\000\000\000\026\000\000\000\
    \012\000\011\000\006\000\007\000\009\000\008\000\010\000\000\000\
    \004\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\000\000\015\000\017\000\016\000\000\000\
    \000\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\014\000\000\000\013\000\000\000\018\000\
    \025\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \000\000\000\000\000\000\000\000\018\000\000\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \027\000\000\000\027\000\000\000\000\000\000\000\000\000\027\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\027\000\000\000\000\000\000\000\
    \000\000\000\000\027\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
    \000\000\000\000\027\000\000\000\027\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\019\000\021\000\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\019\000\021\000\255\255\023\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \023\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \255\255\255\255\255\255\255\255\018\000\255\255\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \025\000\255\255\025\000\255\255\255\255\255\255\255\255\025\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\023\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\025\000\255\255\255\255\255\255\
    \255\255\255\255\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\025\000\255\255\
    \255\255\255\255\025\000\255\255\025\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec next_tokens lexbuf =
   __ocaml_lex_next_tokens_rec lexbuf 0
and __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 74 "lexer.mll"
            ( new_line lexbuf; update_stack (indentation lexbuf) )
# 217 "lexer.ml"

  | 1 ->
# 75 "lexer.mll"
             ( next_tokens lexbuf )
# 222 "lexer.ml"

  | 2 ->
let
# 76 "lexer.mll"
             id
# 228 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 76 "lexer.mll"
                            ( print_endline ("Identifier: " ^ id); [id_or_kwd id] )
# 232 "lexer.ml"

  | 3 ->
# 77 "lexer.mll"
                            ( print_endline "Equal"; [EQUAL] )
# 237 "lexer.ml"

  | 4 ->
# 78 "lexer.mll"
                            ( print_endline "GreaterThan"; [GT] )
# 242 "lexer.ml"

  | 5 ->
# 79 "lexer.mll"
                            ( print_endline "LessThan"; [LT] )
# 247 "lexer.ml"

  | 6 ->
# 80 "lexer.mll"
                            ( print_endline "LBracket"; [LBRACKET] )
# 252 "lexer.ml"

  | 7 ->
# 81 "lexer.mll"
                            ( print_endline "RBracket"; [RBRACKET] )
# 257 "lexer.ml"

  | 8 ->
# 82 "lexer.mll"
                            ( print_endline "LParen"; [LPAREN] )
# 262 "lexer.ml"

  | 9 ->
# 83 "lexer.mll"
                            ( print_endline "RParen"; [RPAREN] )
# 267 "lexer.ml"

  | 10 ->
# 84 "lexer.mll"
                            ( print_endline "Dot"; [DOT] )
# 272 "lexer.ml"

  | 11 ->
# 85 "lexer.mll"
                            ( print_endline "Comma"; [COMMA] )
# 277 "lexer.ml"

  | 12 ->
# 86 "lexer.mll"
                            ( print_endline "Minus"; [MINUS] )
# 282 "lexer.ml"

  | 13 ->
# 87 "lexer.mll"
                            ( print_endline "Plus"; [PLUS] )
# 287 "lexer.ml"

  | 14 ->
# 88 "lexer.mll"
                            ( print_endline "Times"; [TIMES] )
# 292 "lexer.ml"

  | 15 ->
# 89 "lexer.mll"
                            ( Buffer.clear string_buff; string lexbuf; [STRING (Buffer.contents string_buff)] )
# 297 "lexer.ml"

  | 16 ->
let
# 90 "lexer.mll"
               s
# 303 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 90 "lexer.mll"
                            ( [CST (Cint(int_of_string s))] )
# 307 "lexer.ml"

  | 17 ->
# 91 "lexer.mll"
                            ( print_endline "eof"; NEWLINE :: unindent 0 @ [EOF] )
# 312 "lexer.ml"

  | 18 ->
let
# 92 "lexer.mll"
         c
# 318 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 92 "lexer.mll"
                            ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 322 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_next_tokens_rec lexbuf __ocaml_lex_state

and indentation lexbuf =
   __ocaml_lex_indentation_rec lexbuf 21
and __ocaml_lex_indentation_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 96 "lexer.mll"
      ( new_line lexbuf; indentation lexbuf )
# 334 "lexer.ml"

  | 1 ->
let
# 97 "lexer.mll"
              s
# 340 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 98 "lexer.mll"
      ( String.length s )
# 344 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_indentation_rec lexbuf __ocaml_lex_state

and string lexbuf =
   __ocaml_lex_string_rec lexbuf 23
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 102 "lexer.mll"
                            ( () )
# 356 "lexer.ml"

  | 1 ->
let
# 103 "lexer.mll"
                                                 c
# 362 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 103 "lexer.mll"
                                                      ( Buffer.add_char string_buff (char_for_backslash c); string lexbuf )
# 366 "lexer.ml"

  | 2 ->
let
# 104 "lexer.mll"
         c
# 372 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 104 "lexer.mll"
                            ( Buffer.add_char string_buff c; string lexbuf )
# 376 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

# 106 "lexer.mll"
   

let next_token =
    let tokens = Queue.create () in (* next tokens to emit *)
    fun lb ->
      if Queue.is_empty tokens then begin
	let l = next_tokens lb in
	List.iter (fun t -> Queue.add t tokens) l
      end;
      Queue.pop tokens

# 395 "lexer.ml"
